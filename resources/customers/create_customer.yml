post:
  tags:
    - Customers
  operationId: createCustomer
  summary: Create customer
  description: |
     The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer.
     Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
  responses:
    '200':
      description: successful operation
      content:
        application/vnd.conekta-v2.1.0+json:
          schema:
            $ref: '../../schemas/customers/customer_response.yml'
      headers:
        Date:
          description: The date and time that the response was sent
          schema:
            type: string
            example: "Fri, 03 Feb 2023 16:57:48 GMT"
        Content-Type:
          description: The format of the response body
          schema:
            type: string
            example: "application/json; charset=utf-8"
        Content-Length:
          description: The length of the response body in bytes
          schema:
            type: string
            example: "2737"
        Connection:
          description: The type of connection used to transfer the response
          schema:
            type: string
            example: "keep-alive"
        Conekta-Media-Type:
          schema:
            type: string
            example: conekta-v2.1.0; format=application/json
    401:
     $ref: '../errors/401.yml'
    402: 
      $ref: '../errors/402.yml'
    422:
     $ref: '../errors/422.yml'
    500:
     $ref: '../errors/500.yml'
  security:
    - bearerAuth: []
  requestBody:
   $ref: '../../requestBodies/customers/customer.yml'
  parameters:
    - $ref: '../../parameters/commons/headers/accept_language.yml'
    - $ref: '../../parameters/commons/headers/x_child_company_id.yml'
  x-readme:
    code-samples:
    - language: csharp
      #code: "using System.Collections.Generic;\nusing System.Diagnostics;\nusing Conekta.net.Api;\nusing Conekta.net.Client;\nusing Conekta.net.Model;\n\nnamespace Example \n{\n \t public class CreateCustomerExample \n   {\n    public static void Main() \n{\n \t\t\tConfiguration config = new Configuration();\n config.AccessToken = \"YOUR_BEARER_TOKEN\"; var apiInstance = new CustomersApi(config); var customer = new Customer(); var acceptLanguage = es; try { CustomerResponse result = apiInstance.CreateCustomer(customer, acceptLanguage); Debug.WriteLine(result); } catch (ApiException  e) { Debug.Print(\"Exception when calling CustomersApi.CreateCustomer: \" + e.Message); Debug.Print(\"Status Code: \" + e.ErrorCode); Debug.Print(e.StackTrace); } } } }"
      code: |
        using System.Collections.Generic;
        using System.Diagnostics;
        using Conekta.net.Api;
        using Conekta.net.Client;
        using Conekta.net.Model;

        namespace Example
        {
            public class CreateCustomerExample
            {
                public static void Main()
                {
                    Configuration config = new Configuration();
                    config.AccessToken = "key_ZLy4aP2szht1HqzkCezDEA";

                    var apiInstance = new CustomersApi(config);
                    var customer = new Customer(
                       name: "test dot",
                       phone: "+573143159063",
                       email: "test@conekta.com"
                    );

                    try
                    {
                        CustomerResponse result = apiInstance.CreateCustomer(customer, "es");
                        Debug.WriteLine(result);
                    }
                    catch (ApiException  e)
                    {
                        Debug.Print("Exception when calling CustomersApi.CreateCustomer: " + e.Message);
                        Debug.Print("Status Code: " + e.ErrorCode);
                        Debug.Print(e.StackTrace);
                    }
                }
            }
        }
      name: Custom sdk
      install: dotnet add package Conekta.net
get:
  tags:
    - Customers
  operationId: getCustomers
  summary: Get a list of customers
  description: 'The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.'
  responses:
    '200':
      description: successful operation
      content:
        application/vnd.conekta-v2.1.0+json:
          schema:
            title: customers_response
            allOf:
              - type: object
                properties:
                  data:
                    title: customers_data_response
                    type: array
                    items:
                      $ref: '../../schemas/customers/customer_response.yml'
              - $ref: ../../schemas/pagination/pagination.yml
              - $ref: ../../schemas/pagination/page.yml
      headers:
        Date:
          description: The date and time that the response was sent
          schema:
            type: string
            example: "Fri, 03 Feb 2023 16:57:48 GMT"
        Content-Type:
          description: The format of the response body
          schema:
            type: string
            example: "application/json; charset=utf-8"
        Content-Length:
          description: The length of the response body in bytes
          schema:
            type: string
            example: "2737"
        Connection:
          description: The type of connection used to transfer the response
          schema:
            type: string
            example: "keep-alive"
        Conekta-Media-Type:
          schema:
            type: string
            example: conekta-v2.1.0; format=application/json
    401:
     $ref: '../errors/401.yml'
    500:
     $ref: '../errors/500.yml'
  security:
    - bearerAuth: []
  parameters:
    - $ref: '../../parameters/commons/headers/accept_language.yml'
    - $ref: '../../parameters/commons/headers/x_child_company_id.yml'
    - $ref: '../../parameters/commons/query/limit.yml'
    - $ref: '../../parameters/commons/query/search.yml'
    - $ref: '../../parameters/commons/query/next_page.yml'
    - $ref: '../../parameters/commons/query/previous_page.yml'
